<?xml version="1.0" encoding="utf-8"?>
<circuit>
  <version>1</version>
  <attributes>
    <entry>
      <string>shapeType</string>
      <shapeType>LAYOUT</shapeType>
    </entry>
    <entry>
      <string>Label</string>
      <string>hazard detection unit</string>
    </entry>
    <entry>
      <string>Width</string>
      <int>10</int>
    </entry>
  </attributes>
  <visualElements>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>rs1_IFID</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>5</int>
        </entry>
      </elementAttributes>
      <pos x="400" y="240"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>rs2_IFID</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>5</int>
        </entry>
      </elementAttributes>
      <pos x="400" y="300"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>rd_IDEX</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>5</int>
        </entry>
      </elementAttributes>
      <pos x="400" y="360"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>memop_IDEX</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>4</int>
        </entry>
      </elementAttributes>
      <pos x="400" y="420"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>load</string>
        </entry>
      </elementAttributes>
      <pos x="1020" y="240"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>write_IFID</string>
        </entry>
      </elementAttributes>
      <pos x="1020" y="300"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>zero_IDEX</string>
        </entry>
      </elementAttributes>
      <pos x="1020" y="420"/>
    </visualElement>
    <visualElement>
      <elementName>External</elementName>
      <elementAttributes>
        <entry>
          <string>applicationType</string>
          <appType>IVERILOG</appType>
        </entry>
        <entry>
          <string>Label</string>
          <string>hazard_detection</string>
        </entry>
        <entry>
          <string>externalInputs</string>
          <string>rs1_IFID:5,rs2_IFID:5,rd_IDEX:5,memop_IDEX:4,jump</string>
        </entry>
        <entry>
          <string>Width</string>
          <int>12</int>
        </entry>
        <entry>
          <string>Code</string>
          <string>// memory_op
// memory_op = inst[6|14:12] = opcode[6] + funct[2:0]
`define LB 4&apos;b0000
`define LH 4&apos;b0001
`define LW 4&apos;b0010
`define LBU 4&apos;b0100
`define LHU 4&apos;b0101
`define SB 4&apos;b1000
`define SH 4&apos;b1001
`define SW 4&apos;b1010
`define MEM_NOP 4&apos;b1111

module hazard_detection(rs1_IFID, rs2_IFID, rd_IDEX, memop_IDEX, jump,
	load, write_IFID, zero_IFID, zero_IDEX);
	
	input [4:0] rs1_IFID, rs2_IFID, rd_IDEX;
	input [3:0] memop_IDEX;
	input jump;

	output load, write_IFID, zero_IFID, zero_IDEX;
	
	assign load = (memop_IDEX[3] == 0 &amp;&amp; rd_IDEX != 0 &amp;&amp; (rd_IDEX == rs1_IFID || rd_IDEX == rs2_IFID)) ? 0 : 1;
	assign write_IFID = (memop_IDEX[3] == 0 &amp;&amp; rd_IDEX != 0 &amp;&amp; (rd_IDEX == rs1_IFID || rd_IDEX == rs2_IFID)) ? 0 : 1;
	assign zero_IDEX = (memop_IDEX[3] == 0 &amp;&amp; rd_IDEX != 0 &amp;&amp; (rd_IDEX == rs1_IFID || rd_IDEX == rs2_IFID)) ? 1 : 0;
	// 当branch指令结果为跳转，且未发生load-use hazard时，另zero_IFID为0
	assign zero_IFID = (!(memop_IDEX[3] == 0 &amp;&amp; rd_IDEX != 0 &amp;&amp; (rd_IDEX == rs1_IFID || rd_IDEX == rs2_IFID)) &amp;&amp; jump == 1) ? 1 : 0;
endmodule</string>
        </entry>
        <entry>
          <string>externalOutputs</string>
          <string>load,write_IFID,zero_IFID,zero_IDEX</string>
        </entry>
      </elementAttributes>
      <pos x="600" y="240"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>jump</string>
        </entry>
      </elementAttributes>
      <pos x="400" y="480"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>zero_IFID</string>
        </entry>
      </elementAttributes>
      <pos x="1020" y="360"/>
    </visualElement>
  </visualElements>
  <wires>
    <wire>
      <p1 x="400" y="240"/>
      <p2 x="600" y="240"/>
    </wire>
    <wire>
      <p1 x="840" y="240"/>
      <p2 x="1020" y="240"/>
    </wire>
    <wire>
      <p1 x="400" y="480"/>
      <p2 x="480" y="480"/>
    </wire>
    <wire>
      <p1 x="480" y="320"/>
      <p2 x="600" y="320"/>
    </wire>
    <wire>
      <p1 x="420" y="260"/>
      <p2 x="600" y="260"/>
    </wire>
    <wire>
      <p1 x="840" y="260"/>
      <p2 x="1000" y="260"/>
    </wire>
    <wire>
      <p1 x="400" y="420"/>
      <p2 x="460" y="420"/>
    </wire>
    <wire>
      <p1 x="960" y="420"/>
      <p2 x="1020" y="420"/>
    </wire>
    <wire>
      <p1 x="400" y="360"/>
      <p2 x="440" y="360"/>
    </wire>
    <wire>
      <p1 x="980" y="360"/>
      <p2 x="1020" y="360"/>
    </wire>
    <wire>
      <p1 x="440" y="280"/>
      <p2 x="600" y="280"/>
    </wire>
    <wire>
      <p1 x="840" y="280"/>
      <p2 x="980" y="280"/>
    </wire>
    <wire>
      <p1 x="400" y="300"/>
      <p2 x="420" y="300"/>
    </wire>
    <wire>
      <p1 x="460" y="300"/>
      <p2 x="600" y="300"/>
    </wire>
    <wire>
      <p1 x="1000" y="300"/>
      <p2 x="1020" y="300"/>
    </wire>
    <wire>
      <p1 x="840" y="300"/>
      <p2 x="960" y="300"/>
    </wire>
    <wire>
      <p1 x="480" y="320"/>
      <p2 x="480" y="480"/>
    </wire>
    <wire>
      <p1 x="960" y="300"/>
      <p2 x="960" y="420"/>
    </wire>
    <wire>
      <p1 x="420" y="260"/>
      <p2 x="420" y="300"/>
    </wire>
    <wire>
      <p1 x="980" y="280"/>
      <p2 x="980" y="360"/>
    </wire>
    <wire>
      <p1 x="440" y="280"/>
      <p2 x="440" y="360"/>
    </wire>
    <wire>
      <p1 x="1000" y="260"/>
      <p2 x="1000" y="300"/>
    </wire>
    <wire>
      <p1 x="460" y="300"/>
      <p2 x="460" y="420"/>
    </wire>
  </wires>
  <measurementOrdering/>
</circuit>