/*
	程序指令测试文件
	使用下面指令，修改code initial，测试对应指令
*/

// lui: 符号位扩展的立即数1放到目标寄存器rd[1]
inst = 00000000000000000001 00001 0110111

r[0] = 8'b00000000;
r[1] = 8'b00000000;
r[2] = 8'b00010000;
r[3] = 8'b10110111;

// auipc: AUIPC将20位立即数构建一个32位偏移量，将其低12位填0，然后将这个偏移量加到pc上，最后将结果写入寄存器rd。
inst = 00000000000000000001 00001 0010111

r[0] = 8'b00000000;
r[1] = 8'b00000000;
r[2] = 8'b00010000;
r[3] = 8'b10010111;

// jal: 将偏移量imm符号扩展，加到pc上，形成跳转目标地址，JAL将跳转指令后面指令的地址（pc+4）保存到寄存器rd中。
inst = 00000000010000000000 00001 1101111
r[0] = 8'b00000000;
r[1] = 8'b01000000;
r[2] = 8'b00000000;
r[3] = 8'b11101111;

// jalr: 通过将12位有符号立即数加上rs1，然后将结果的最低位设置为0，作为目标地址。跳转指令后面指令的地址（pc+4）保存到寄存器rd中。
inst = 000000000100 00001 000 00001 1100111

r[0] = 8'b00000000;
r[1] = 8'b01000000;
r[2] = 8'b10000000;
r[3] = 8'b11100111;

// blt: 比较r1, r2，如果r1小于r2，跳转到pc+imm，否则pc+4
inst = 0000000 00010 00001 100 00010 1100011
r[0] = 8'b00000000;
r[1] = 8'b00100000;
r[2] = 8'b11000001;
r[3] = 8'b01100011;
// beq
inst = 0000000 00010 00001 000 00010 1100011
r[0] = 8'b00000000;
r[1] = 8'b00100000;
r[2] = 8'b10000001;
r[3] = 8'b01100011;

// lb: Load指令将存储器中的一个值复制到寄存器rd中。有效字节地址是通过将寄存器rs1与符号扩展的12位偏移量相加而获得的。
inst = 000000000010 00001 000 00010 0000011

r[0] = 8'b00000000;
r[1] = 8'b00100000;
r[2] = 8'b10000001;
r[3] = 8'b00000011;

// sw: Store指令将寄存器rs2中的值复制到存储器中。有效字节地址是通过将寄存器rs1与符号扩展的12位偏移量相加而获得的。
inst = 0000000 00010 00001 010 00010 0100011

r[0] = 8'b00000000;
r[1] = 8'b00100000;
r[2] = 8'b10100001;
r[3] = 8'b00100011;

// addi: r[2] = r[1] + 1
inst = 00000000000100001000000100010011

r[0] = 8'b00000000;
r[1] = 8'b00010000;
r[2] = 8'b10000001;
r[3] = 8'b00010011;

// sll
inst = 0000000 00010 00001 001 00011 0110011
r[0] = 8'b00000000;
r[1] = 8'b00100000;
r[2] = 8'b10010001;
r[3] = 8'b10110011;


// 测试连续4条指令
// r[1] = r[0] + 1
inst = 000000000001 00000 000 00001 0010011
// r[2] = r[0] + 2
inst = 000000000010 00000 000 00010 0010011
// r[3] = r[1] + r[2]
inst = 0000000 00010 00001 000 00011 0110011
// sw r[3] address r[0]+0
inst = 0000000 00011 00000 010 00000 0100011

r[0] = 8'b00000000;
r[1] = 8'b00010000;
r[2] = 8'b00000000;
r[3] = 8'b10010011;

r[4] = 8'b00000000;
r[5] = 8'b00100000;
r[6] = 8'b00000001;
r[7] = 8'b00010011;

r[8] = 8'b00000000;
r[9] = 8'b00100000;
r[10] = 8'b10000001;
r[11] = 8'b10110011;

r[12] = 8'b00000000;
r[13] = 8'b00110000;
r[14] = 8'b00100000;
r[15] = 8'b00100011;



r[0] = 8'b;
r[1] = 8'b;
r[2] = 8'b;
r[3] = 8'b;







